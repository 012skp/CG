Problem: Given k convex_objects find a convex_hull that includes all convex_objects.

# Constructing one convex hull from a set of points is easy.
# Given n points we can construct convex hull in O(n*log(n)) time.
# This includes sorting time O(n*log(n)) + convex hull creation time O(n).
# So if we are given sorted points, we can find convex hull in O(n).

# One solution to this problem can be take all points form all objects and sort them. 
  Total points would be 'n*k', and sorting complexity would be O(nk*log(nk)).
  Now use use this construct convex_hull in O(nk) time.
  Total time complexity in this case: O(nk*log(nk)) + O(nk) = O(nk*log(nk));
# But we don't want the basic approach, we want to use the inputs 
  that are given to us as a set of 'k' convex_objects to reduce the time complexity.
# The idea is to sort all points in time less than O(nk*log(nk)).
# This is done as follows...



# Steps involved in algorithms are...
1: Each object is represented by a list of points either in clockwise or anti-clockwise direction. Take input from a 'test' file.
2: For each object create a list that contains points of the object in increasing order.
3: Now merge the sorted list of each object into one big list.
4: Use the simple convex_hull algorithm to find convex object from the sorted list.

# Pseudo Code...
step 1: Take input from file 'test'.

step 2: For each object find left most point and right most point. --complexity: O(n)
	# Object is divided into two halves by joining the points left most and right most.
	# Now see upper half is sorted as well as lower half is sorted.
	Construct a list by merging lower half and upper half. --compexity: O(n)
	# This list is the sorted list that contain all points of the object.
	Do the same for all 'k' objects. --complexity: O(n*k)

step 3: # This step merges the sorted list of all objects into one big list.
	merge(obj[],l,r,ans){
		if(l-r == 1) ans = merge_two_into_one(obj[l],obj[r],ans); 
		else if(l == r) ans = obj[l]; 
		else{
			int mid = (l+r)/2;
			var ans1,ans2
			merge(obj,l,mid,ans1);
			merge(obj,mid+1,r,ans2);
			merge_two_into_one(ans1,ans2,ans);
		}
	}

	# execution looks like... assume there are 'n'(avg) points in each objects
	
	obj_1, obj_2, obj_3, obj_4, . . . . . . .  obj_k-1, obj_k

	  obj_12,       obj_34,   . . . .    obj_(k-1)k				--complexity(n*k)
		
		obj_14   . . . . . . . obj_(k-3)k				--complexity(n*k)
				.
				.
				.
				.
			obj_1(k/2),obj_(k/2)k					--complexity(n*k)
			
				obj_1k						--complexity(n*k)
		

	# height is log(k) and at each level we are merging total of (n*k) points...
	Total complexity: O(n*k*log(k));


step 4:	# We have got 'n*k' points which are sorted apply convex_hull algorithm to construct the hull.
	complexity: O(nk);




			    step 2  +     step 3    +     step 4
So total time_complexity is  O(nk)  +  O(nk*log(k)) +     O(nk)   = O(nk*log(k)).




